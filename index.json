[{
    "title": "Frequentist Statistics vs Bayesian Statistics",
    "date": "",
    "description": "",
    "body": "Knowledge is accumulated based on numbers and text. Each number represents the outcome of the observed event. Extract the information among numbers and estimated the randomness behind events are methods to gather knowledge. Based on probability, which describes randomness, Statistics is a collection of approaches that provides summaries and inferences. According to different utilizations on probability, two main schools are developed: Frequentist Statistics and Bayesian Statistics.\nBefore knowing the approaches deepen, we can start from an example in which we can apply Statistics. A scientific question is whether the average grades of senior high school students in Taiwan increasing by the year. The target is all Taiwan\u0026rsquo;s students; however, we can only obtain a small part of the record among them. As a result, we compute the average that represents the mean of all Taiwan\u0026rsquo;s students. The mean of all Taiwan’s students is the parameter that Statisticians are interested in this example. The way statisticians regard the parameter varies from the Frequentist Statistics and the Bayesian Statistics.\nThe most fundamental difference is inference, which includes the estimation of the parameter and its interval. Frequentist statisticians consider the parameter as a fixed number, while Bayesian statisticians believe the parameter is a random variable and from a distribution. Although the estimation of the parameter is the main goal in Statistics, the error of the estimation is also as important as the estimation. In Frequentist Statistics, Confidence Interval is proposed to measure the estimation error which uses the residuals and the size of the data (e.g. the number of the students in the above example). Whereas Bayesian statisticians create the Confidence Band that is from the corresponded distribution of the estimated parameter.\nDespite the two schools are developed from the contrast concepts, the same results can be obtained sometimes. Bayesian Statistics result is affected by prior information specified. However, if no prior information could be used, the uniform distribution provides an informative prior distribution. Adopting uniform distribution leads to the same result as in Frequentist Statistics. For example, ridge regression is a well-known case.\nBayesian Statisticians and Frequentist Statisticians have not gotten along well with each other for a long time. The two schools are different roads, but they both concerned similar questions.\n",
    "ref": "/blog/frequentist-statistics-vs-bayesian-statistics/"
  },{
    "title": "A revised chart for cfd-trading.com",
    "date": "",
    "description": "",
    "body": "According to the article \u0026ldquo;top performers over the past 24 hours\u0026rdquo; in website World Markets Snapshot, there are 2 key points mentioned. In the first paragraph, the author summarizes the numbers in the category by averaging. Then, the individual stock performance followed. However, it is hard to tell the key points in the current version chart that is shown above. The 2 key points are:\n Which category performs the best/worst? Which individual stock performs the best/worst?  I design a bar chart to emphasize the 2 points. Here are my ideas:\n Separate the bar charts by the categories of stock, and Fill red and green colors representing increasing and decreasing respectively.  In this chart, it is easy to recognize which category performance better by the sum of the number of red bars and specify the best stock performance by finding the longest red bar.\n",
    "ref": "/blog/visualization-for-cfdtrading/"
  },{
    "title": "About YT Fan",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/about/"
  },{
    "title": "",
    "date": "",
    "description": "",
    "body": "How to install XGBoost in Python for macOS? (2020.02) Our goal is to install the XGBoost package, which can be compiled with multi-threads. Therefore, we need to install \u0026ldquo;GCC\u0026rdquo; which can compile multithread code. Here are the clear goals:\n Install GCC Install XGBoost package  What have already installed:\n Anacoda Python 3 Homebrew  Installation GCC Obtain gcc from homebrew and check the version of gcc.\n$ brew install gcc $ gcc -dumpversion Here, I was suggested by ref 2 to uncomment the following two lines in Makefile.\nexport CC = gcc export CXX = g++ Then, add the following two lines in Makefile. (version of gcc)\nexport CC = gcc-12 export CXX = g++-12 XGBoost Obtain libomp and cmake from homebrew.\n$ brew install libomp # for multithread $ brew install cmake # for cmake command below change the directory to where you want to save xgboost folder and clone the repository.\n$ cd \u0026lt;dir\u0026gt; $ git clone --recursive https://github.com/dmlc/xgboost Create the build/ directory and invoke CMake. After invoking CMake, you can build XGBoost with make:\n$ cd \u0026lt;dir\u0026gt; $ mkdir build # create a new and empty folder under \u0026lt;dir\u0026gt; $ cd build # change directory to build $ cmake .. # build several files automatically $ make -j4 # specify the no. of cores Install the XGBoost to your current Python environment.\n$ python [setup.py](http://setup.py/) install Finally, we can use conda list to check whether downloads successfully or not.\n筆記  Ref 2 安裝xgboost的方法不適用，所以找到 Ref 1 官方文件，其中有使用libomp，因此不確定gcc之必要性 cmake 指令需要利用homebrew安裝 cmake(官方文件未註明) .. 代表上一層目錄；../.. 代表上上層目錄  Reference XGBoost official installation guide\n如何在OS X上安裝XGBoost (Morris Tai, 2017/8/3)\n",
    "ref": "/blog/how-to-install-xgboost-in-python-for-macos/"
  },{
    "title": "",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
